# see https://www.postgresql.org/docs/13/datatype.html

define postgresql {
    default      = true
    priority     = 1
    policy       = "widely"
    policyDesc   = "PostgreSQL TypeProcessor Policy(Widely)"
}

[*]
    arrayDimension = pgArrayDimension()
    arrayMinSize   = 0
    arrayMaxSize   = 10
    arrayTypeHandler = net.hasor.dbvisitor.faker.provider.postgresql.typehandler.PgArrayTypeHandlerFactory

[bool]
    jdbcType       = boolean
    seedType       = boolean

[smallserial]
[int2]
    jdbcType       = tinyint
    seedType       = number
    numberType     = int
    minMax         = range(0, 100)

[serial]
[int4]
    jdbcType       = integer
    seedType       = number
    numberType     = int
    minMax         = range(0, 99999999)

[oid]
    jdbcType       = bigint
    seedType       = number
    numberType     = long
    minMax         = range(0, 100000000)

[bigserial]
[int8]
    jdbcType       = bigint
    seedType       = number
    numberType     = long
    minMax         = range(0, 9999999999)

[float4]
[float8]
    jdbcType       = double
    seedType       = number
    numberType     = double
    minMax         = range(0, 9999999.999)
    scale          = min(${decimalDigits}, 3)

[numeric]
    jdbcType       = decimal
    seedType       = number
    numberType     = decimal
    precision      = ifThen(pgNumericValid(), ${columnSize}, 6)
    scale          = ifThen(pgNumericValid(), ${decimalDigits}, 2)

[money]
    jdbcType       = decimal
    seedType       = number
    numberType     = decimal
    minMax         = range(0, 99999.999)
    scale          = 3
    typeHandler    = net.hasor.dbvisitor.types.handler.pg.PgMoneyAsBigDecimalTypeHandler
    insertTemplate     = pgFmtType("?", "numeric", "money")
    whereValueTemplate = pgFmtType("?", "numeric", "money")
    setValueTemplate   = pgFmtType("?", "numeric", "money")

[name]
[bpchar]
[text]
[varchar]
    jdbcType       = varchar
    seedType       = string
    minLength      = 1
    maxLength      = safeMaxLength(1, ${columnSize}, 250, 10)
    characterSet   = [ letter_number ]

[uuid]
    jdbcType       = other
    seedType       = gid
    dateType       = string36
    insertTemplate     = pgFmtType("?", "uuid")
    whereValueTemplate = pgFmtType("?", "uuid")
    setValueTemplate   = pgFmtType("?", "uuid")

[date]
    jdbcType       = date
    seedType       = date
    dateType       = LocalDate
    genType        = random
    rangeForm      = "2000-01-01"
    rangeTo        = "2030-12-31"
    typeHandler    = net.hasor.dbvisitor.types.handler.SqlTimestampAsLocalDateTypeHandler

[time]
    jdbcType       = time
    seedType       = date
    dateType       = LocalTime
    genType        = random
    precision      = safeMaxLength(0, ${decimalDigits}, 7, 3)
    rangeForm      = "00:00:00.0000000"
    rangeTo        = "23:59:59.9999999"
    typeHandler    = net.hasor.dbvisitor.types.handler.SqlTimestampAsLocalTimeTypeHandler

[timetz]
    jdbcType       = time_with_timezone
    seedType       = date
    dateType       = OffsetTime
    genType        = random
    precision      = safeMaxLength(0, ${decimalDigits}, 7, 3)
    rangeForm      = "00:00:00.0000000"
    rangeTo        = "23:59:59.9999999"
    zoneForm       = "-08:00"
    zoneTo         = "+08:00"

[interval]
    jdbcType       = other
    seedType       = date
    dateType       = iso8601
    genType        = random
    precision      = 0
    rangeForm      = "2000-01-01 00:00:00"
    rangeTo        = "2030-12-31 23:59:59"
    insertTemplate     = pgFmtType("?", "interval")
    whereValueTemplate = pgFmtType("?", "interval")
    setValueTemplate   = pgFmtType("?", "interval")

[timestamp]
    jdbcType       = timestamp
    seedType       = date
    dateType       = LocalDateTime
    genType        = random
    precision      = safeMaxLength(0, ${decimalDigits}, 7, 3)
    rangeForm      = "2000-01-01 00:00:00"
    rangeTo        = "2030-12-31 23:59:59"

[timestamptz]
    jdbcType       = timestamp_with_timezone
    seedType       = date
    dateType       = OffsetDateTime
    genType        = random
    precision      = safeMaxLength(0, ${decimalDigits}, 7, 3)
    rangeForm      = "2000-01-01 00:00:00"
    rangeTo        = "2030-12-31 23:59:59"
    zoneForm       = "-08:00"
    zoneTo         = "+08:00"

[bit]
    jdbcType       = varchar
    seedType       = string
    minLength      = 1
    maxLength      = safeMaxLength(1, ${columnSize}, ifThen(pgColIsArray(), 8, 24), 4)
    characterSet   = [ bit ]
    insertTemplate     = pgFmtType("?", "bit")
    whereValueTemplate = pgFmtType("?", "bit")
    setValueTemplate   = pgFmtType("?", "bit")

[varbit]
    jdbcType       = varchar
    seedType       = string
    minLength      = 1
    maxLength      = safeMaxLength(1, ${columnSize}, ifThen(pgColIsArray(), 8, 24), 4)
    characterSet   = [ bit ]
    insertTemplate     = pgFmtType("?", "bit varying")
    whereValueTemplate = pgFmtType("?", "bit varying")
    setValueTemplate   = pgFmtType("?", "bit varying")

[bytea]
    jdbcType       = varbinary
    seedType       = bytes
    minLength      = 0
    maxLength      = safeMaxLength(0, ${columnSize}, 16, 4)

[point]
[line]
[lseg]
[box]
[path]
[polygon]
[circle]
[geometry]
    jdbcType       = other
    seedType       = geometry
    range          = range(50, 0.0, 0.0, 1000, 1000)
    precision      = 5
    minPointSize   = 2
    maxPointSize   = 10
    geometryType   = pgToGeoType(${columnType})
    formatType     = WKT
    insertTemplate   = pgFmtType("?", ifThen(pgColIsArray(), pgElementType(${columnType}), ${columnType}))
    setValueTemplate = pgFmtType("?", ifThen(pgColIsArray(), pgElementType(${columnType}), ${columnType}))
    ignoreAct      = [ DeleteWhere, UpdateWhere ]

[json]
[jsonb]
    # 86 = "json,jsonb,1111"
[xml]
    # 84 = "xml,2009"
[cidr]
[inet]
[macaddr]
[macaddr8]
    # ip address,1111
[int4range]
[int8range]
[numrange]
[tsrange]
[tstzrange]
[daterange]
    # range,1111
[tsvector]
[tsquery]
[pg_lsn]
[txid_snapshot]
    throw "this columnType Unsupported."